import requests
from bs4 import BeautifulSoup
import time
from sys import argv
import argparse
import sys

start = time.perf_counter()
print("[+] Start \n" +"="*50 )
StartTime = time.strftime("%H:%M:%S")
print(f"StartTime : %s " %(StartTime))

# results to output file
def outfile(i, mode="a+", time = time.strftime("%d_%H%M%S")):
    #time = time.strftime("%d_%H%M%S")
    filename = f"outfile_{str(time)}.txt"
    file = open(filename, mode)
    file.write(str(i)+"\n")
    file.close()

def detect_h2(ip,ports = 8082):
    URL = f"http://{ip}:{ports}/"
    print("input url", URL)

    try:
        r1 = requests.get(URL, allow_redirects = True)
        r1.close()
        #print(dir(r1), "\n")
        out_html = r1.text # response
        r_url = r1.url ## request url
        # beautifulsoup
        b1 = BeautifulSoup(out_html, "html.parser")
        search = "Sorry, remote connections ('webAllowOthers') are disabled on this server."

        ## Checking if h2 web console supports remote connection
        if b1.head.title.text.strip() == "H2 Console" and b1.p != None and b1.p.text.strip() == search:
            print(f"[-] h2 console {r1.url} but", b1.p.text.strip() )

        elif b1.head.title.text.strip() == "H2 Console" and b1.h2 == None or b1.h2.text == "No Javascript":
            #if len(key2) < 10
            outfile(f" {r1.url}", "a")
            print(f"[+] h2 Console detected on {r1.url}, further validation is required.")
            return str(ip)
        else:
            print(f"[-] No h2 console detected.")

    except requests.ConnectionError:
        print("[-] Error Connection Refused")
        print(f"[-] No h2 console detected on {URL}.")

    # except AttributeError:
    #     print("[-]AttributeError")
    #     return "None Attribute Error"
    # except:
    #     return "Some exception occured."

## generating ip list from a file
def ip_list(filename):
    with open(filename, "r") as list:
        IPs = list.readlines()
    return IPs

def filename1(name="IP.txt"):
    filename = "IP.txt"
    if len(argv) > 1:
        filename = argv[1]
    return filename

def filename(name="IP.txt"):
    try:
        filename = "IP.txt"
        if len(argv) > 1:
            filename = argv[1]
        print("filename_:{filename}")
        return filename
    except FileNotFoundError:
        print("[-] File not found, enter a valid file name")

if __name__ == "__main__":
    # filename
    filename = filename()
    # filename = "IP.txt"
    IPs = ip_list(filename)
    if IPs == []:
        print(f"[-] No IPs found the input file is empty. Add IPs to the file")
    else:
        print(f"Input IP list : {IPs}")
    # print(f"Input IP list : {IPs}")
    print(f"="*50 )
    outlist = []
    for i in IPs:
        print(i.strip())
        try:
            x = detect_h2(i.strip())
            if x != None:
                outlist.append(x)
        except KeyboardInterrupt:
            print("Intrrupted")
            sys.exit()
        except requests.ConnectionError:
            print(f"[-] Connection Error {i.strip()}")
        print(f"-"*50 )

    print(f"[+] IPs with h2 console : {outlist}")
    print(f"-"*50 )

    # Manual test
    # IP = "192.168.10.1"
    # detect_h2(IP)

## timer/counter
finish = time.perf_counter()
print(f"[+]Script time (sec) : {round(finish-start )}")
EndTime = time.strftime("%H:%M:%S")
print(f"End Time : %s " %(EndTime))
print(f"="*50 )
print("[+] The End")


# Reference: other options
# nmap -sV --script http-title --script-args "http-title.url=/" -p80,443,8000-9000 192.168.0.0/8 | grep "H2 Console"
# https://jfrog.com/blog/the-jndi-strikes-back-unauthenticated-rce-in-h2-database-console/

### About The Script
# The script detect H2 server for the give list of IPs,
# it can identify the H2 Console web pages and check for access restrictions.
# Detections h2 web console pages and checks console accessibility.
###

# Script Version : v0.3.4

# By Vivek Gopal
# Security Analyst
# Cybersecurityworks


